*****************************************

  Based on SDK 25

*****************************************

 WifiController extends StateMachine
   ||
   ||  mWifiStateMachine         --  WifiStateMachine
   ||  mSoftApStateMachine       --  SoftApStateMachine
   ||


                          --  mApStaDisabledState
                                                          -- mDeviceActiveState
                          --  mStaEnabledState      ---#
                                                                                          -- mScanOnlyLockHeldState
                                                                                          -- mFullLockHeldState
                                                          -- mDeviceInactiveState  ---#
                                                                                          -- mFullHighPerfLockHeldState
                                                                                          -- mNoLockHeldState
                          --  mStaEnablingState
                          --  mStaDisablingState
                          --  mApEnablingState
    mDefaultState ---#    --  mApDisablingState
                          --  mApStaEnablingState
                          --  mApStaDisablingState
                          --  mApStaEnabledState
                          --  mStaDisabledWithScanState
                          --  mApEnabledState
                          --  mEcmState


 WifiStateMachine extends StateMachine
   || implements WifiNative.WifiRssiEventHandler
   ||
   ||
   ||

                                            mDefaultState
                                                |
                                                |
                                                #
  /               /                     /               \                         \
  |               |                     |               |                         |
  |               |                     |               |                         |
 mInitialState mSupplicantStartedState mSoftApState  mSupplicantStartingState  mSupplicantStoppingState
                  |
                  |
                  |
                  #

    /                    \                  \                          \                     \
    |                    |                  |                          |                     |
    |                    |                  |                          |                     |
  mDriverStartingState mDriverStartedState mWaitForP2pDisableState  mDriverStoppingState  mDriverStoppedState
                            |
                            |
                            |
                            #

                  /                    \
                  |                    |
                  |                    |
                 mScanModeState      mConnectModeState
                                            |
                                            |
                                            |
                                            #
       /                     /                  \                 \
       |                     |                  |                 |
       |                     |                  |                 |
      mDisconnectingState  mDisconnectedState  mL2ConnectedState mWpsRunningState
                                                |
                                                |
                                                |
                                                #
                                 /                  \              \
                                 |                  |              |
                                 |                  |              |
                                mObtainingIpState mConnectedState mRoamingState


 WifiScanningServiceImpl extends
   || IWifiScanner.Stub
   ||
   ||  mScannerImpl              --  WifiScannerImpl
   ||  mBackgroundScanStateMachine -- WifiBackgroundScanStateMachine
   ||  mSingleScanStateMachine   --  WifiSingleScanStateMachine
   ||  mWifiChangeStateMachine   --  WifiChangeStateMachine
   ||  mPnoScanStateMachine      --  WifiPnoScanStateMachine

  1. WifiBackgroundScanStateMachine

        mDefaultState

        |           |
        |           |
   mStartedState  mPausedState

  2. WifiSingleScanStateMachine

        mDefaultState

            |
            |
      mDriverStartedState

       |           |
       |           |
    mIdleState   mScanningState

  3. WifiChangeStateMachine

        mDefaultState

         |            |
         |            |
   mStationaryState  mMovingState

  4. WifiPnoScanStateMachine

        mDefaultState
            |
            |
        mStartedState

        |               |
        |               |
    mHwPnoScanState   mSwPnoScanState
       |
       |
    mSingleScanState



 HalWifiScannerImpl extends
   || WifiScannerImpl implements Handler.Callback
   ||
   ||  mWifiNative               --  WifiNative
   ||

 SupplicantStateTracker extends
   || StateMachine
   ||
   ||

                          --  mUninitializedState
                          --  mInactiveState
                          --  mDisconnectState
    mDefaultState   ---#  --  mScanState
                          --  mHandshakeState
                          --  mCompletedState
                          --  mDormantState

  state start from mUninitializedState

###############################################
###############################################

DEBUG TAGs: wpa_supplicant WifiHAL

hostapd conf:
/data/misc/wifi/hostapd.conf

about hostapd and dnsmasq:
https://www.shellvoide.com/wifi/setup-wireless-access-point-hostapd-dnsmasq-linux/

ip route:
http://linux-ip.net/html/tools-ip-route.html

ip table:
https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html#MARKMATCH

linux route policy intro:
https://blog.scottlowe.org/2013/05/29/a-quick-introduction-to-linux-policy-routing/

iptables tutorial:
https://www.hostinger.com/tutorials/iptables-tutorial#gref

iptables:
https://wiki.archlinux.org/index.php/iptables

###############################################
###############################################
Linux IP_FORWARD说明
ip地址分公有地址和私有地址，public address是由INIC(internet network information center)负责，这些ip地址分配给注册并向INIC提出申请的组织机构.
通过它访问internet.private address是属于非注册地址，专门为组织内部使用，private ip address是不可能直接用来跟WAN通信的，要么利用帧来通信
（FRE帧中继，HDLC,PPP）,要么需要路由的NAT功能把私有地址转换为一个公有ip!

选择一台电脑（有两个网卡或者用单网卡然后用软件虚拟多一个网卡）充当网关，一个网卡(eth0)连接外网ISP，另一网卡(eth1)连接内网(即局域网)。局域网
内的ip地址都是私用地址，只能在内部使用，在公网上是不可见的，所以局域网电脑要上网必须修改ip，这就是网关的工作。

工作原理：
内网主机向公网发送数据包时，由于目的主机跟源主机不在同一网段，所以数据包暂时发往内网默认网关处理，而本网段的主机对此数据包不做任何回应。由于
源主机ip是私有的，禁止在公网使用，所以必须将数据包的源发送地址修改成公网上的可用ip，这就是网关收到数据包之后首先要做的工作--ip转换。然后网关
再把数据包发往目的主机。目的主机收到数据包之后，只认为这是网关发送的请求，并不知道内网主机的存在，也没必要知道，目的主机处理完请求，把回应
信息发还给网关。网关收到后，将目的主机发还的数据包的目的ip地址修改为发出请求的内网主机的ip地址，并将其发给内网主机。这就是网关的第二个工作--
数据包的路由转发。内网的主机只要查看数据包的目的ip与发送请求的源主机ip地址相同，就会回应，这就完成了一次请求。

出于安全考虑，Linux系统默认是禁止数据包转发的。所谓转发即当主机拥有多于一块的网卡时，其中一块收到数据包，根据数据包的目的ip地址将包发往本机
另一网卡，该网卡根据路由表继续发送数据包。这通常就是路由器所要实现的功能。
配置Linux系统的ip转发功能，首先保证硬件连通，然后打开系统的转发功能
less /proc/sys/net/ipv4/ip_forward，该文件内容为0，表示禁止数据包转发，1表示允许，将其修改为1。
可使用命令echo "1" > /proc/sys/net/ipv4/ip_forward 修改文件内容，重启网络服务或主机后效果不再。


###############################################
###############################################
DEBUG INFO(connect with and open hostap):
06:58:42.424   937   937 D Netd    : modifyIpRule action 32 prioriy 15000 ruleType 1 table 99 fwmark 0 mask 65536  iif (null) oif (null)
06:58:42.424   937   937 D Netd    : modifyIpRule action 32 prioriy 16000 ruleType 1 table 98 fwmark 0 mask 65536  iif (null) oif (null)
06:58:42.424   937   937 D Netd    : modifyIpRule action 32 prioriy 10000 ruleType 1 table 99 fwmark 786432 mask 851968  iif (null) oif (null)
06:58:42.425   937   937 D Netd    : modifyIpRule action 32 prioriy 13000 ruleType 1 table 97 fwmark 65635 mask 131071  iif (null) oif (null)
06:58:42.425   937   937 D Netd    : modifyIpRule action 32 prioriy 17000 ruleType 1 table 97 fwmark 0 mask 65536  iif (null) oif (null)
06:58:42.425   937   937 D Netd    : modifyIpRule action 32 prioriy 23000 ruleType 1 table 254 fwmark 0 mask 65535  iif (null) oif (null)
06:58:42.426   937   937 D Netd    : modifyIpRule action 32 prioriy 32000 ruleType 7 table 0 fwmark 0 mask 0  iif (null) oif (null)
06:58:42.428   937   937 E Netd    : Unable to create netlink socket: Protocol not supported
06:58:42.428   937   937 W Netd    : Unable to open qlog quota socket, check if xt_quota2 can send via UeventHandler
06:58:47.312  1436  1607 D WIFIDBG : scanner HalWifiScannerImpl
06:58:54.786   937  1547 D Netd    : modifyIpRule action 32 prioriy 13000 ruleType 1 table 1008 fwmark 65636 mask 131071  iif (null) oif (null)
06:58:54.787   937  1547 D Netd    : modifyIpRule action 32 prioriy 10500 ruleType 1 table 1008 fwmark 0 mask 0  iif (null) oif wlan0
06:58:54.787   937  1547 D Netd    : modifyIpRule action 32 prioriy 14000 ruleType 1 table 1008 fwmark 0 mask 0  iif (null) oif wlan0
06:58:54.787   937  1547 D Netd    : modifyIpRule action 32 prioriy 19000 ruleType 1 table 1008 fwmark 100 mask 131071  iif (null) oif (null)
06:58:55.307   937  1547 D Netd    : modifyIpRoute interface wlan0 table 1008 dest fe80::/64 nexthop (null)
06:58:55.311   937  1547 D Netd    : modifyIpRoute interface wlan0 table 1008 dest 192.168.43.0/24 nexthop (null)
06:58:55.311   937  1547 E Netd    : netlink response contains error (File exists)
06:58:55.314   937  1547 D Netd    : modifyIpRoute interface wlan0 table 1008 dest 0.0.0.0/0 nexthop 192.168.43.1
06:58:56.200   937  1547 D Netd    : modifyIpRule action 32 prioriy 22000 ruleType 1 table 1008 fwmark 0 mask 65535  iif (null) oif (null)
07:02:28.686  1822  1822 D WIFIDBG : TetherSettings mEnableWifiApSettingsExt false
07:02:28.786  1822  1822 D WIFIDBG : WifiApEnabler receive action android.net.conn.TETHER_STATE_CHANGED
07:11:00.509  1436  2307 D WIFIDBG : Tethering startTethering type 0
07:11:00.550  1436  2307 D WIFIDBG : Tethering setWifiTethering true
07:11:00.550  1436  2307 D WIFIDBG : WifiServiceImpl setWifiApEnabled enable true
07:11:00.555  1436  1606 D WIFIDBG : SoftApStateMachine setWifiApState 12 reason 0
07:11:00.572  1822  1822 D WIFIDBG : WifiApEnabler receive action android.net.wifi.WIFI_AP_STATE_CHANGED
07:11:00.596  1822  1822 D WIFIDBG : WifiApEnabler receive action android.net.conn.TETHER_STATE_CHANGED
07:11:01.641  1436  1606 D WIFIDBG : SoftApStateMachine setWifiApState 13 reason 0
07:11:01.645  1822  1822 D WIFIDBG : WifiApEnabler receive action android.net.wifi.WIFI_AP_STATE_CHANGED
07:11:01.676  1436  1492 D WIFIDBG : NetworkManagementService tetherInterface softap0
07:11:01.749   937  1547 D Netd    : modifyIpRule action 32 prioriy 10500 ruleType 1 table 97 fwmark 0 mask 0  iif (null) oif softap0
07:11:01.749   937  1547 D Netd    : modifyIpRule action 32 prioriy 14000 ruleType 1 table 97 fwmark 0 mask 0  iif (null) oif softap0
07:11:01.751  1436  1492 D WIFIDBG : NetworkManagementService addInterfaceToLocalNetwork 192.168.43.0/24 -> 0.0.0.0 softap0
07:11:01.751  1436  1492 D WIFIDBG : NetworkManagementService modifyRoute 192.168.43.0/24 -> 0.0.0.0 softap0
07:11:01.752   937  1547 D Netd    : modifyIpRoute interface softap0 table 97 dest 192.168.43.0/24 nexthop (null)
07:11:01.777  1822  1822 D WIFIDBG : WifiApEnabler receive action android.net.conn.TETHER_STATE_CHANGED
07:11:02.231  1436  1492 D WIFIDBG : NMS startInterfaceForwarding from softap0 to wlan0
07:11:02.232   937  1547 D Netd    : modifyIpRule action 32 prioriy 18000 ruleType 1 table 1008 fwmark 0 mask 0  iif softap0 oif (null)

ip route list
default via 192.168.43.1 dev wlan0  proto static
192.168.43.0/24 dev wlan0  proto kernel  scope link  src 192.168.43.108
192.168.43.0/24 dev softap0  proto kernel  scope link  src 192.168.43.1

ip rule
0:  from all lookup local
10000:  from all fwmark 0xc0000/0xd0000 lookup legacy_system
10500:  from all oif wlan0 uidrange 0-0 lookup main
10500:  from all oif softap0 uidrange 0-0 lookup local_network
13000:  from all fwmark 0x10063/0x1ffff lookup local_network
13000:  from all fwmark 0x10064/0x1ffff lookup main
14000:  from all oif wlan0 lookup main
14000:  from all oif softap0 lookup local_network
15000:  from all fwmark 0x0/0x10000 lookup legacy_system
16000:  from all fwmark 0x0/0x10000 lookup legacy_network
17000:  from all fwmark 0x0/0x10000 lookup local_network
18000:  from all iif softap0 lookup main
19000:  from all fwmark 0x64/0x1ffff lookup main
22000:  from all fwmark 0x0/0xffff lookup main
23000:  from all fwmark 0x0/0xffff uidrange 0-0 lookup main
32000:  from all unreachable

ifconfig
lo        Link encap:Local Loopback
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::1/128 Scope: Host
          UP LOOPBACK RUNNING  MTU:65536  Metric:1
          RX packets:3656 errors:0 dropped:0 overruns:0 frame:0
          TX packets:3656 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1
          RX bytes:1262869 TX bytes:1262869

wlan0     Link encap:Ethernet  HWaddr 00:03:7f:12:de:de
          inet addr:192.168.43.108  Bcast:192.168.43.255  Mask:255.255.255.0
          inet6 addr: fe80::203:7fff:fe12:dede/64 Scope: Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:375 errors:0 dropped:0 overruns:0 frame:0
          TX packets:310 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:3000
          RX bytes:259316 TX bytes:38142

p2p0      Link encap:Ethernet  HWaddr 02:03:7f:94:de:de
          UP BROADCAST MULTICAST  MTU:1500  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:3000
          RX bytes:0 TX bytes:0

softap0   Link encap:Ethernet  HWaddr 02:03:7f:95:de:de
          inet addr:192.168.43.1  Bcast:192.168.43.255  Mask:255.255.255.0
          inet6 addr: fe80::3:7fff:fe95:dede/64 Scope: Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:5 errors:0 dropped:2 overruns:0 carrier:0
          collisions:0 txqueuelen:3000
          RX bytes:0 TX bytes:610

eth0      Link encap:Ethernet  HWaddr 66:74:49:67:33:fb
          UP BROADCAST MULTICAST  MTU:1500  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:0 TX bytes:0
